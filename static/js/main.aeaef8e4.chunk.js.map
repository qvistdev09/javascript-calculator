{"version":3,"sources":["serviceWorker.js","index.js","App.js"],"names":["Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message","props","operatorRegex","state","gridItemWidth","gridItemHeight","upperOutput","lowerOutput","decimals","upperLast","showingResult","digitLimit","warningBlock","onClearPress","bind","onDigitPress","onZeroPress","onEqualPress","onOperatorPress","onDecimalPress","numberLimit","this","setState","digit","length","slice","test","Math","round","eval","operator","savedValue","setTimeout","id","style","gridTemplateColumns","gridTemplateRows","OutputField","upper","lower","CalcButton","label","gridArea","btnClass","press","React","Component","className","onClick"],"mappings":"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","file":"static/js/main.aeaef8e4.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React from 'react';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.operatorRegex = /(\\*|\\/|\\+|-)/;\n    this.state = {\n      gridItemWidth: 4,\n      gridItemHeight: 4,\n      upperOutput: ' ',\n      lowerOutput: '0',\n      decimals: false,\n      upperLast: '',\n      showingResult: false,\n    };\n    this.digitLimit = 24;\n    this.warningBlock = false;\n    this.onClearPress = this.onClearPress.bind(this);\n    this.onDigitPress = this.onDigitPress.bind(this);\n    this.onZeroPress = this.onZeroPress.bind(this);\n    this.onEqualPress = this.onEqualPress.bind(this);\n    this.onOperatorPress = this.onOperatorPress.bind(this);\n    this.onDecimalPress = this.onDecimalPress.bind(this);\n    this.numberLimit = this.numberLimit.bind(this);\n  }\n\n  onClearPress() {\n    this.setState({\n      upperOutput: '',\n      lowerOutput: '0',\n      decimals: false,\n      upperLast: '',\n      showingResult: false,\n    });\n  }\n\n  onDigitPress(digit) {\n    if (this.warningBlock) {\n      return;\n    }\n\n    if (this.state.lowerOutput.length >= this.digitLimit) {\n      this.numberLimit();\n      return;\n    }\n    // if showing result, build new number\n    else if (this.state.showingResult) {\n      this.setState({\n        showingResult: false,\n        upperOutput: digit,\n        lowerOutput: digit,\n        upperLast: digit,\n        decimals: false,\n      });\n      // if lower field is zero only, replace zero instead of adding onto it\n    } else if (this.state.lowerOutput === '0') {\n      this.setState((state) => ({\n        upperOutput:\n          state.upperOutput.slice(0, state.upperOutput.length - 1) + digit,\n        lowerOutput: digit,\n        upperLast: digit,\n      }));\n      // if lower field is math operator\n    } else if (this.operatorRegex.test(this.state.upperLast)) {\n      this.setState((state) => ({\n        upperLast: digit,\n        lowerOutput: digit,\n        upperOutput: state.upperOutput + digit,\n        decimals: false,\n      }));\n    } else {\n      this.setState((state) => ({\n        upperOutput: state.upperOutput + digit,\n        lowerOutput: state.lowerOutput + digit,\n        upperLast: digit,\n      }));\n    }\n  }\n\n  onZeroPress() {\n    if (this.warningBlock) {\n      return;\n    }\n\n    if (this.state.lowerOutput.length >= this.digitLimit) {\n      this.numberLimit();\n      return;\n    }\n    // if showing result, reset\n    else if (this.state.showingResult) {\n      this.setState({\n        showingResult: false,\n        decimals: false,\n        upperLast: '',\n        upperOutput: '',\n        lowerOutput: '0',\n      });\n      // if lower field is single zero, do nothing\n    } else if (this.state.lowerOutput === '0') {\n      return;\n      // if last input is math operator\n    } else if (this.operatorRegex.test(this.state.upperLast)) {\n      this.setState((state) => ({\n        decimals: false,\n        upperOutput: state.upperOutput + '0',\n        lowerOutput: '0',\n        upperLast: '0',\n      }));\n    } else {\n      this.setState((state) => ({\n        upperOutput: state.upperOutput + '0',\n        lowerOutput: state.lowerOutput + '0',\n        upperLast: '0',\n      }));\n    }\n  }\n\n  onEqualPress() {\n    // only eval math string if it looks like an actual formula\n    if (\n      this.state.showingResult === false &&\n      /[0-9]+[+|\\-|*|/]+[0-9]+/.test(this.state.upperOutput)\n    ) {\n      this.setState((state) => ({\n        // eslint-disable-next-line\n        lowerOutput: Math.round(eval(state.upperOutput) * 10000000) / 10000000,\n        decimals: false,\n        upperOutput:\n          state.upperOutput +\n          '=' +\n          // eslint-disable-next-line\n          Math.round(eval(state.upperOutput) * 10000000) / 10000000,\n        showingResult: true,\n      }));\n    }\n  }\n\n  onOperatorPress(operator) {\n    // if showing result, build new formula with old result as first value\n    if (this.state.showingResult) {\n      this.setState((state) => ({\n        upperOutput: state.lowerOutput + operator,\n        lowerOutput: operator,\n        upperLast: operator,\n        decimals: false,\n        showingResult: false,\n      }));\n      // if pressing same operator twice, do nothing\n    } else if (this.state.upperLast === operator) {\n      return;\n      // if pressing minus and last input was operator but not minus, allow minus as second operator\n    } else if (\n      operator === '-' &&\n      this.operatorRegex.test(this.state.upperLast) &&\n      this.state.upperLast !== '-'\n    ) {\n      this.setState((state) => ({\n        upperOutput: state.upperOutput + operator,\n        lowerOutput: operator,\n        upperLast: operator,\n        decimals: false,\n      }));\n    }\n    // if two operators are already inputted and user clicks third operator, switch to new operator only\n    else if (\n      this.operatorRegex.test(\n        this.state.upperOutput[this.state.upperOutput.length - 1]\n      ) &&\n      this.operatorRegex.test(\n        this.state.upperOutput[this.state.upperOutput.length - 2]\n      )\n    ) {\n      this.setState((state) => ({\n        upperOutput:\n          state.upperOutput.slice(0, state.upperOutput.length - 2) + operator,\n        lowerOutput: operator,\n        upperLast: operator,\n        decimals: false,\n      }));\n    }\n    // if pressing operator and last input was different operator, switch to new operator\n    else if (\n      this.operatorRegex.test(this.state.upperLast) &&\n      this.operatorRegex.test(\n        this.state.upperOutput[this.state.upperOutput.length - 2]\n      ) !== true &&\n      this.state.upperLast !== operator\n    ) {\n      this.setState((state) => ({\n        lowerOutput: operator,\n        upperOutput:\n          state.upperOutput.slice(0, state.upperOutput.length - 1) + operator,\n        upperLast: operator,\n        decimals: false,\n      }));\n    } else if (this.state.lowerOutput === '0') {\n      this.setState({\n        upperOutput: '0' + operator,\n        lowerOutput: operator,\n        upperLast: operator,\n        decimals: false,\n      });\n    } else if (/[0-9]/.test(this.state.upperLast)) {\n      this.setState((state) => ({\n        upperLast: operator,\n        upperOutput: state.upperOutput + operator,\n        lowerOutput: operator,\n        decimals: false,\n      }));\n    }\n  }\n\n  onDecimalPress() {\n    if (this.warningBlock) {\n      return;\n    }\n\n    if (this.state.lowerOutput.length >= this.digitLimit) {\n      this.numberLimit();\n      return;\n    }\n    // if showing result and pressing decimal, start new number with 0.\n    else if (this.state.showingResult) {\n      this.setState({\n        upperLast: '.',\n        upperOutput: '0.',\n        lowerOutput: '0.',\n        decimals: true,\n        showingResult: false,\n      });\n      // do nothing if current number is already a decimal number\n    } else if (this.state.decimals === true) {\n      return;\n      // if last input is operator and pressing decimal, start next number with 0.\n    } else if (this.operatorRegex.test(this.state.upperLast)) {\n      this.setState((state) => ({\n        decimals: true,\n        upperLast: '.',\n        upperOutput: state.upperOutput + '0.',\n        lowerOutput: '0.',\n      }));\n    } else if (this.state.lowerOutput === '0') {\n      this.setState((state) => ({\n        upperOutput: state.upperOutput + '0.',\n        lowerOutput: '0.',\n        decimals: true,\n        upperLast: '.',\n      }));\n    } else {\n      this.setState((state) => ({\n        upperOutput: state.upperOutput + '.',\n        lowerOutput: state.lowerOutput + '.',\n        decimals: true,\n        upperLast: '.',\n      }));\n    }\n  }\n\n  numberLimit() {\n    if (this.warningBlock) {\n      return;\n    }\n\n    this.warningBlock = true;\n    const savedValue = this.state.lowerOutput;\n    this.setState({\n      lowerOutput: 'MAX DIGITS REACHED',\n    });\n    setTimeout(() => {\n      this.setState({ lowerOutput: savedValue });\n      this.warningBlock = false;\n    }, 1000);\n  }\n\n  render() {\n    return (\n      <div\n        id=\"calculator\"\n        style={{\n          gridTemplateColumns: 'repeat(4, ' + this.state.gridItemWidth + 'rem)',\n          gridTemplateRows:\n            'minmax(4rem, max-content) repeat(5, ' +\n            this.state.gridItemHeight +\n            'rem)',\n        }}\n      >\n        <OutputField\n          upper={this.state.upperOutput}\n          lower={this.state.lowerOutput}\n        />\n        <CalcButton\n          label={'AC'}\n          gridArea={'AC'}\n          btnClass=\"AC hoverable\"\n          press={this.onClearPress}\n          id=\"clear\"\n        />\n        <CalcButton\n          label={'/'}\n          btnClass=\"light hoverable\"\n          press={this.onOperatorPress}\n          id=\"divide\"\n        />\n        <CalcButton\n          label={'*'}\n          btnClass=\"light hoverable\"\n          press={this.onOperatorPress}\n          id=\"multiply\"\n        />\n        <CalcButton\n          label={'7'}\n          btnClass=\"dark hoverable\"\n          press={this.onDigitPress}\n          id=\"seven\"\n        />\n        <CalcButton\n          label={'8'}\n          btnClass=\"dark hoverable\"\n          press={this.onDigitPress}\n          id=\"eight\"\n        />\n        <CalcButton\n          label={'9'}\n          btnClass=\"dark hoverable\"\n          press={this.onDigitPress}\n          id=\"nine\"\n        />\n        <CalcButton\n          label={'-'}\n          btnClass=\"light hoverable\"\n          press={this.onOperatorPress}\n          id=\"subtract\"\n        />\n        <CalcButton\n          label={'4'}\n          btnClass=\"dark hoverable\"\n          press={this.onDigitPress}\n          id=\"four\"\n        />\n        <CalcButton\n          label={'5'}\n          btnClass=\"dark hoverable\"\n          press={this.onDigitPress}\n          id=\"five\"\n        />\n        <CalcButton\n          label={'6'}\n          btnClass=\"dark hoverable\"\n          press={this.onDigitPress}\n          id=\"six\"\n        />\n        <CalcButton\n          label={'+'}\n          btnClass=\"light hoverable\"\n          press={this.onOperatorPress}\n          id=\"add\"\n        />\n        <CalcButton\n          label={'1'}\n          btnClass=\"dark hoverable\"\n          press={this.onDigitPress}\n          id=\"one\"\n        />\n        <CalcButton\n          label={'2'}\n          btnClass=\"dark hoverable\"\n          press={this.onDigitPress}\n          id=\"two\"\n        />\n        <CalcButton\n          label={'3'}\n          btnClass=\"dark hoverable\"\n          press={this.onDigitPress}\n          id=\"three\"\n        />\n        <CalcButton\n          label={'='}\n          gridArea=\"equal\"\n          btnClass=\"equal hoverable rounded-corner-right\"\n          press={this.onEqualPress}\n          id=\"equals\"\n        />\n        <CalcButton\n          label={'0'}\n          gridArea=\"zero\"\n          btnClass=\"dark hoverable rounded-corner-left\"\n          press={this.onZeroPress}\n          id=\"zero\"\n        />\n        <CalcButton\n          label={'.'}\n          btnClass=\"dark hoverable\"\n          press={this.onDecimalPress}\n          id=\"decimal\"\n        />\n      </div>\n    );\n  }\n}\n\nfunction CalcButton(props) {\n  return (\n    <button\n      className={props.btnClass ? props.btnClass + ' calc-child' : 'calc-child'}\n      style={\n        props.gridArea ? { gridArea: props.gridArea } : { gridArea: 'initial' }\n      }\n      onClick={() => props.press(props.label)}\n      id={props.id}\n    >\n      {props.label}\n    </button>\n  );\n}\n\nfunction OutputField(props) {\n  return (\n    <div className=\"calc-child output\" style={{ gridArea: 'output' }}>\n      <div className=\"output-row\">{props.upper}</div>\n      <div className=\"output-row\" id=\"display\">\n        {props.lower}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n"],"sourceRoot":""}